// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package assets generated by go-bindata.// sources:
// playground.html
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _playgroundHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xff\x73\xda\xb8\xb6\xff\x3d\x7f\xc5\x79\xda\xd9\x49\x3a\x1b\x0b\xf9\xbb\xe1\x42\xde\xdb\xb6\x79\x6d\xe7\x76\x6f\xb3\x7b\x3b\xed\xdb\xf7\x9b\x63\x0b\x50\x62\x2c\x6a\x89\x2f\x69\xa7\xff\xfb\x1d\xc9\x36\x18\x0c\xc1\xa1\x90\xcd\xce\x84\x99\x04\x59\x3a\x5f\x3f\xe7\x1c\x61\x49\x98\xee\x7f\xbd\xfe\xf0\xea\xe3\x9f\x57\x97\x30\x94\xa3\xe4\xe2\xe4\xa4\xbb\x78\xa7\x61\x7c\x71\x02\xd0\x1d\x51\x19\x42\x34\x0c\x33\x41\x65\x6f\x22\xfb\x46\x00\xad\xe5\x40\x1a\x8e\x68\x0f\x4d\x19\x9d\x8d\x79\x26\x11\x44\x3c\x95\x34\x95\x3d\x34\x11\x34\x33\x44\x14\x26\xe1\x75\x42\x7b\x29\x3f\x07\x96\x32\xc9\xc2\x44\x77\xd2\x9e\x89\xc9\x39\x8c\x58\xca\x46\x93\xd1\x4a\x57\x38\xaf\x75\x29\xaa\x30\x31\x26\x0c\x69\xc5\x92\xc9\x84\x5e\x7c\xfb\x06\x58\xb7\xe0\xfb\xf7\x6e\x2b\xef\x53\xa3\x09\x4b\x6f\x21\xca\xb8\x10\x3c\x63\x03\x96\xf6\x50\x98\xf2\xf4\x6e\xc4\x27\x02\x41\x46\x93\x1e\x12\xf2\x2e\xa1\x62\x48\xa9\x44\x27\x00\x00\xc3\x8c\xf6\x7b\xa8\xd5\x8a\xe2\x14\xdf\x88\x98\x26\x6c\x9a\xe1\x94\xca\x56\x3a\x1e\xb5\x06\x59\x38\x1e\x7e\x49\x8c\x71\x12\xde\x0d\x32\x3e\x49\x63\x23\xa3\x61\x24\x95\xfa\x29\xcd\x04\xe3\x29\x7c\xff\xde\xba\x9e\xb0\x24\x6e\x09\x19\x4a\x16\xb5\x22\x21\x5a\x2c\x8d\xe9\x1c\x47\x42\xa0\x02\xae\x06\x76\x0d\x79\x26\xa3\x89\x04\x16\xf1\xf4\xd0\xa6\xf5\xc3\xa9\x12\x8b\xc7\xe9\xa0\xb4\x48\x44\x19\x1b\xcb\x6d\x36\x69\xfd\x22\x8b\x0e\x8a\xcc\x8d\x68\x8d\x58\x1c\x27\x74\x16\x66\x14\xdf\x08\x74\xd1\x6d\xe5\x66\x5c\x9c\x74\x5b\x79\xce\x9d\x74\xaf\x79\x7c\x97\x5b\xa8\x22\x05\xf2\x6e\x4c\x7b\x48\xd2\xb9\x54\xc8\xea\x1c\x00\x9d\xaf\xf0\x4d\x37\x01\xfa\x3c\x95\x46\x3f\x1c\xb1\xe4\xae\x03\xe8\xc3\x98\xa6\xf0\xef\x30\x15\xe8\x1c\x44\x98\x0a\x43\xd0\x8c\xf5\xff\x51\xd0\xf2\x29\xcd\xfa\x09\x9f\x75\x60\xc8\xe2\x98\xa6\x79\xff\xf7\x13\xfd\xa6\x34\x2f\xa4\x8e\xc2\x6c\xc0\xd2\x0e\x90\x92\xf5\x3a\x8c\x6e\x73\x4f\x3b\xf0\x93\xe9\x5b\xa1\x1d\xae\x70\xe3\x25\x14\xef\xd2\x85\x18\x63\x46\xaf\x6f\x99\x34\x42\x95\xc5\x92\xf1\xb4\x03\x2b\x74\x04\xbb\x02\x68\x28\xa8\xc1\x27\x12\xfa\x3c\x9b\x85\x59\x2c\x4a\x9d\xfb\x70\x15\xe6\xfc\x4f\xa9\xf9\x96\xde\xf5\xb3\x70\x44\x05\x6c\x34\xb0\x9f\xf1\xd1\xe2\x02\x80\x8f\xc3\x88\xc9\xbb\x8a\xdf\x4b\x1f\x64\x16\xa6\xa2\xcf\xb3\x51\x07\x74\x33\x09\x25\xfd\xf3\xcc\x24\xe3\xf9\x8b\x0a\xf1\x48\x34\x23\x6c\x40\x54\xb8\x02\x20\xf9\x26\x13\xcd\xa6\x26\x92\x46\xf6\x91\x9d\xc6\x91\x8a\x65\x55\xa8\x9f\x21\x3e\x22\xc4\x00\xdd\x96\x9e\x0a\x2e\x4e\x76\xcc\x0a\xb8\x1f\xc6\xf4\xc3\x44\xde\x57\x7c\x25\x49\xe3\xba\x6b\xc2\xb0\xbd\xe4\x14\xf7\x21\x33\xc1\x68\x9c\x0a\xeb\x94\x4d\xa8\x9e\x7e\x32\xac\xd7\xdb\x33\xbe\xc7\xc0\x77\x73\x1e\x57\x2b\x6b\x1b\xd0\x7f\xa9\x0b\xf7\x82\xfb\x64\x52\x60\x7b\x22\x3f\x03\x7c\x70\x80\xeb\x99\x1c\x8e\xc7\x34\xcc\x0e\x39\x67\x34\xf5\xa6\x89\x2f\x7f\xc7\xd9\xe2\x19\xdb\xe3\x61\x5b\xcf\x5f\xbd\x34\xde\x0e\xf1\x06\x73\x35\xc7\x7d\x96\xd6\x09\xee\x19\xdc\x8c\xdc\x56\xb5\xe6\x2e\xb5\xe6\x7d\x6a\xcd\x9d\x29\xf7\x0c\xc7\xc6\x2c\x61\x69\x4a\xb3\xd7\x59\x38\xab\x40\x43\x7e\xae\x58\x28\x64\xc6\x6f\xa9\x11\x87\x62\xc8\xfb\x7d\x41\x65\x07\x7c\x52\x73\xca\xdd\xc5\x63\x3a\x75\x26\x93\xec\xe2\xb2\x4c\xb2\x2b\xae\x7f\x53\x07\xea\x91\xe0\x13\xf9\x70\x47\xbc\x3d\x6c\x32\x5d\x6b\x17\xa8\x7f\xb9\x2d\x78\xf8\xf6\xf3\xcd\xed\xb4\xb6\x40\x5b\x64\xba\x91\x6f\x45\x75\x80\x8c\xe7\xea\xaf\x94\xb2\x52\x2b\xdb\x88\x76\x4b\xd9\x3d\x1b\xec\x98\x0b\xee\xe3\xac\x2f\x36\xcb\xc9\x89\x60\xcb\x15\x90\xb0\x94\x86\xd9\x62\xe9\xa8\x7a\xd7\x5e\x9b\xd6\x9f\x7b\xca\x28\x01\x1f\xbc\x7a\xfd\xe1\x6b\xfc\x0c\x78\x0e\x96\x73\x00\xc0\xb7\xc8\x58\x64\xf8\xe8\x55\x34\x67\xcf\x80\xe7\x60\x79\x07\x00\x7c\x8b\x8c\x12\x70\xfa\x36\x1c\xfd\xfe\x0c\x78\x01\x56\xb0\x8a\x95\xbd\x0f\xe0\x5b\x64\x94\x80\x5f\xdf\x0d\x07\x6f\x26\xcf\x80\x2b\xb0\x4c\x4c\x56\xc1\x32\x1f\x0e\xf8\x56\x19\x25\xe0\x49\xf2\xeb\x3f\xaf\x9e\xf1\xce\xb1\xb2\x7e\x38\xc1\xb7\xca\x58\x24\xf8\x20\x79\xf7\xe6\xb7\x06\x80\x7b\xce\x78\x0e\x56\xb0\x0b\xf2\x1a\x59\x13\x49\x4f\x0a\xf6\x47\xb9\x55\xb9\x15\xf3\x3f\xde\xbd\x6b\x00\x7b\xdb\xc5\xed\xc0\x25\x84\x78\x26\xb1\x5d\xd3\xf5\xc6\x73\x70\x3c\xec\x9a\x84\x10\x62\x59\x41\x10\x98\x81\xed\xed\x8a\xca\x43\xa5\x1c\xc0\x8e\x27\x16\xd3\x47\xb8\x1b\x8a\x3e\x67\x2f\x47\xd7\x0d\x63\xea\x9b\x9e\xe5\x59\x81\xe9\xdb\x81\x2a\x05\x08\x6c\xec\xb4\x09\x21\xa6\xe7\x07\x8e\xe7\xed\xac\xb3\x87\xc9\xf8\x61\x1b\x9e\x58\x34\x1f\xe1\x56\xeb\x73\x3a\x11\x4d\x82\xa9\x67\x33\x93\x98\xb8\xed\xb7\xdb\x6d\xd7\xb7\x7c\xd7\x6e\x93\x9d\x15\xb9\x93\x6d\x1f\x4d\x4f\x2c\x4a\x8f\x71\x7f\xd6\xbf\xfa\xd2\x6f\x10\x25\xdb\xc2\xc4\x6e\x07\x96\xe9\x59\x8e\xef\xba\x81\xb7\x47\xc9\x3d\x4c\xc6\x0f\xdb\xf0\xa4\x82\xf9\x28\xf7\x7e\x34\xfe\xe3\xd5\xc7\x7f\x35\x8d\xa6\xed\xba\x96\xe9\xa9\x5a\x08\x88\xbb\xd7\xa7\xe2\x83\xc5\x1c\xc2\x92\x27\x16\x56\xeb\x87\x6b\x74\xe7\x2d\x26\xbb\x7c\xf3\xe9\xf3\x72\x13\xae\x7e\x30\x52\xd9\x54\x0b\xb3\x2c\xbc\xab\x6e\xc4\x6d\x70\xa9\xba\xb3\xb7\xf9\x9b\x0a\x40\xb0\xbd\xf6\x12\xe7\xcb\x13\x1b\x82\xcd\x86\x4c\x1b\xc0\xf8\x0b\xb4\xd7\x30\x30\x98\xa4\x59\xde\x8a\xf8\x24\x95\x1d\x30\xcf\x97\xe7\x38\x8d\xc8\x16\x13\xa8\xe0\x51\x3c\x7f\xe4\xe0\xb8\xfb\xc0\x53\x63\xda\x37\x38\x87\xd5\x7e\xcc\xe0\xdc\xfc\xfa\xff\xff\x37\xba\x7a\xe4\xe0\xf8\xab\x8e\x3a\x8d\xe0\xa9\x31\xed\x1b\x9c\xc3\x6a\x3f\x66\x70\x86\xff\xa6\xbf\x66\x8f\x5d\x39\xed\x7d\x72\xb7\xc6\xb4\x6f\x70\x0e\xab\xfd\xa8\xd3\xda\xa7\xc1\x97\x37\xb7\x8f\x1a\x1c\x13\x9b\x0f\x87\x67\x03\xd3\x7e\xc1\x39\xb4\xf6\xa3\x56\xce\xe5\xff\x7e\x79\x29\x1f\x39\x38\xf6\x3e\xf0\xd4\x98\xf6\x0d\xce\x61\xb5\x1f\x33\x38\xf1\xd7\xcb\x7f\xbe\xfa\xed\x61\xc1\x21\xf7\x04\xa7\x7a\xb8\x5d\xfa\xc9\xd2\x9a\xab\xde\xca\xcb\xaf\xe1\x53\xbf\xeb\xac\xb1\x6c\x88\xcd\xe3\x2b\x6f\x10\x1a\x96\xf6\x59\xca\x24\x6d\x16\xa1\x1a\x75\x19\xa8\xd7\x7f\xa6\x57\x0f\xfc\xf8\xf9\xf1\x38\xad\xdd\x06\x59\x0d\xa0\xaa\xb1\xec\x1d\xa7\x43\x2a\x7f\xbc\x38\x0d\x6f\xae\x2e\x7f\xfd\xfd\xb1\x03\xe5\x93\x95\x57\x13\xac\x6a\x2c\x7b\x07\xea\x90\xca\x1f\x2d\x50\x3f\x25\x3c\x8c\x59\x3a\x30\x66\x99\x32\x36\x5b\x44\x6c\xcc\x05\xcb\xbd\x0f\xaf\x05\x4f\x26\x92\x96\x5a\x66\x2c\x96\xc3\x0e\x98\x84\x4c\x67\x65\xdf\x90\xb2\xc1\x50\xe6\x9d\xc3\xb2\x33\x66\x62\x9c\xa8\xc8\x96\xde\x5c\xf3\xf9\xd6\xb1\x7e\x42\x37\x0c\x8e\x84\x1e\xd8\xc4\x58\x65\x58\xc0\x95\xb0\x81\x76\x7e\x24\x3a\x10\xd1\x54\xd2\x6c\x9d\xe4\x9a\xcf\x73\xb2\x1a\x41\xa1\x6b\xf3\x68\x43\xc9\xe3\x30\xba\xdd\x36\x7e\x33\x11\x92\xf5\xef\x8c\xe2\x19\xba\xad\xfa\x37\xc9\xd8\xc5\x5b\x01\xd1\x88\x59\x46\xa3\x3c\x74\x11\x4f\x26\xa3\xb4\xa6\x61\x2b\xc5\x7d\xa3\x8b\xb3\x4a\x3e\x58\x7e\x11\xae\xc8\x05\xdf\x5d\xee\xf5\x94\xa9\x50\xed\xcb\x1f\xb5\x32\xae\xb9\x94\x7c\xd4\x01\xab\x72\xfa\x58\x9f\x19\xb6\x3c\xd3\xf1\x90\x47\xa9\x1a\xd0\x97\xee\x48\x3a\x97\xab\x0f\x9a\x09\xf6\x95\x76\xc0\xb6\x96\x36\xea\xee\x59\xe1\x97\x45\x16\x96\x2a\xde\xcd\xe9\x12\xf1\x84\x67\x1d\xc8\x06\xd7\xe1\x99\xe5\xba\xe7\xb0\xfc\x47\xb0\xf7\xe2\xa9\x38\x1f\xbf\xe9\xbf\xed\x47\xab\xee\x97\x7e\x3a\xa5\x9f\x2b\x0f\xe8\x00\x74\x63\x36\x05\x16\xf7\xd0\xda\xcc\x51\x3c\xa2\xd3\x15\xd3\x01\x44\x49\x28\x84\xa2\x18\x70\x04\x53\x46\x67\x2f\xf9\xbc\x87\x08\x10\x30\xad\x40\xfd\x21\x98\x8f\x92\x54\x74\xe6\x09\x4b\x6f\x7b\x68\x28\xe5\xb8\xd3\x6a\xcd\x66\x33\x3c\xb3\x31\xcf\x06\x2d\xb3\xdd\x6e\xb7\xf4\x68\x21\x77\xf1\x60\xe8\x9b\x2c\x1c\x0f\x7f\x7f\x0f\x57\x8b\x07\xb1\xe0\x3d\x1f\xf0\xca\x33\xa2\x9a\x38\xa6\x7d\x51\x5e\xe4\x8f\x67\xd2\x30\x7b\x93\x85\x31\xa3\xa9\xcc\xed\x5f\xe9\x32\x4c\x04\x73\xb3\x87\x1c\x1c\x78\x3f\x23\x98\x5b\x3d\xd4\xf6\xb0\x65\xfe\x8c\xe0\xce\xec\x21\xa2\xde\x55\x5f\x1b\x7b\xde\xcf\x68\x29\x59\x3f\xb0\xc4\xc7\xa0\xfe\x19\x3a\xec\x3d\xf4\xd3\x25\x21\x24\xb0\x50\xde\x59\x04\xb9\x87\x70\x80\x20\xff\xfe\x9c\x96\x77\xa1\x40\xe5\xe3\x86\xa2\x4a\x46\x93\x6c\x62\xed\xb6\x56\xbd\x59\xc0\xd0\xaa\xe2\xd0\x1d\x54\x38\x54\x91\x6b\x1c\x4a\x1e\x94\x57\x73\x0f\x99\x96\x8f\xdb\x1e\x2a\x2a\x79\x79\x7d\xd7\x43\x26\x82\x3e\x4b\x92\x1e\x9a\x64\xc9\xd9\x4f\xeb\x08\xbe\x40\x90\xcd\x7b\xc8\x51\xf6\x29\xf1\x15\x6d\xe3\x50\x0e\xb5\xb6\x97\x3c\x8b\x69\x56\x8a\x59\xb8\xa7\x2e\x8d\x6c\x92\xd0\x1e\x4a\x79\xfa\x95\x66\x1c\x55\x70\x89\x7b\xe8\x37\x07\xfb\x60\xe1\xc0\x89\x0c\x13\xbb\x01\x10\xc3\xc2\x81\x07\x26\xb6\x82\xbc\x65\xe1\xc0\x9d\x9a\xa6\x87\x5d\x3f\x22\xea\x26\xc8\xd7\x83\x9a\x47\x0f\xea\xd6\xb0\xa0\xd0\xe3\x44\x77\x19\x26\xb6\xbc\xbc\x65\xe1\xc0\xfe\xe4\x62\xcf\x8f\x88\xd2\xe2\xea\x21\xdd\xbb\xfc\xf7\xd6\xc1\x9e\xff\x55\x9b\x43\x72\x69\x41\x64\x63\xd3\x01\x02\x2e\xf6\x94\x3e\xd7\xcd\x5b\x2e\xf6\xa7\x05\x01\x01\x45\x62\x58\xd8\x75\xf4\x98\x51\x10\x78\x81\x12\x17\x44\x86\x8d\x4d\x1b\x88\xee\xd6\x54\xc6\x82\x4a\xd9\x13\xbc\x32\x4c\x25\x58\xf9\xeb\xba\x40\x40\x6b\xff\x8a\xaa\x09\xa0\x10\x5e\x07\xbc\xa8\xc3\xfc\xeb\x0e\x08\xe6\x3d\xe4\x39\x3a\x8e\xaa\x02\x8b\x08\xf4\xfb\x7d\xa4\x01\xf6\x1c\xb0\xbd\xc8\x70\xb0\x63\x01\x31\x02\xc3\xc6\x6e\x60\x04\x46\x20\xf2\x06\xe8\x3f\x50\x17\xa0\x2e\xf2\x86\xea\xab\x46\x4a\x4f\x13\x3d\xb4\xe9\x3b\xf0\x67\x26\x21\xe3\xf9\x39\xe8\xb7\x17\xff\x50\x49\x72\x8f\xcd\xf9\x77\x05\xb4\xcd\xb5\x53\x78\xed\x42\xfd\xbc\x61\xc5\xa5\xb5\xec\x09\xda\x98\x38\xe0\x12\xec\x5a\x91\x61\x61\xcb\xb0\x55\xbc\x71\xdb\x08\xb0\x6f\x83\x85\xdb\x8e\x61\x12\xdc\xf6\xc0\xce\xe3\x6c\x41\x80\x7d\xcb\xc0\x6d\x50\xdd\xae\xa6\x00\xd5\xad\xf8\x70\x5b\x8d\x2a\xb2\xb6\xa3\xc7\x3d\x25\x4e\x11\x59\x4a\x9e\x87\xdb\x5a\x98\xaf\x09\x8e\x82\x4e\xa4\x4f\xdd\x17\xe8\xac\x9c\x69\x6b\x74\xd6\x8f\xd8\xee\xc3\xc6\x24\x96\xf2\xc8\xc7\xae\x86\x46\xbb\x68\xf8\xd8\x04\x17\x9b\xae\xf6\xc4\xc9\x11\xb2\xf3\x1a\xb1\x0c\x57\x25\xb3\x8f\x4d\xcb\xa8\x20\x57\xa2\x0a\x7a\x40\xf1\xe6\xd8\xe5\x30\xd9\x79\x8d\x5a\xb6\x92\xea\x69\x1a\x58\xe2\x77\x14\x90\xf4\x61\x76\x35\xeb\xeb\xc7\xc8\xf7\xc1\xe2\x39\x60\x9a\x44\x17\x84\x5d\x14\x84\xa7\xea\x01\x13\x55\x1f\x0e\x76\x94\x53\xae\x9f\x77\xe4\xfd\x62\x59\x1f\x98\x58\x91\xaa\x53\x85\x9a\xeb\xeb\x6b\x23\xef\x3e\x8a\xaf\xfa\x48\x58\xfb\x5a\x3b\x70\x7d\x70\x3e\x58\x2e\x36\x97\xe9\x50\xab\x14\xfb\x70\x95\xe2\x14\x95\xe2\x1e\xaf\x52\xf2\xe3\xd5\x25\x32\x2b\xc7\x96\x7b\x4c\x24\x76\xa0\x7c\x5f\x4e\x24\x8b\x6a\xb1\x96\xe5\xe2\x2e\xca\xc5\x2a\xcb\xc5\x5a\x94\x8b\xd5\xb4\x5c\xec\x45\xb9\x38\x8f\x52\x2e\xf9\x89\x25\x2a\x56\xe6\xe5\x27\x43\xb1\x4e\x2f\x6e\x0d\x9c\x45\x87\xfa\xec\x8f\xc2\x71\x0f\xe9\x5b\xb0\x95\xee\x1b\xce\xd2\xb2\x7f\xbd\xa6\x6c\xf5\xf9\x65\xf9\xd8\x4d\x6c\x35\xe9\x98\x6d\x43\xbd\x1b\x66\xfb\xeb\xae\x04\xd7\x47\x76\xc7\xb5\xae\xed\x81\xe3\x4d\xed\xc0\xb0\x83\x5d\xe6\xe4\x87\x54\xc7\x36\x07\x3b\x2e\x04\x0e\x76\x13\xa3\x40\x0b\x1a\xa2\x95\x1f\xd3\x1c\x39\x96\x8e\x32\xcf\x24\x76\x69\x9f\x51\xd8\x07\x0d\xa2\xa9\x4f\x2a\x8e\x6b\x9f\x6d\x41\xe0\x7c\xd2\x01\xdd\x09\x97\xde\x9b\x3f\xb2\x39\xfa\xd6\x4d\x4d\x36\x49\x01\x96\xd1\x10\xac\x7c\x73\x1a\xe9\xdb\xe7\x8f\x19\x0b\xd3\x41\x42\x8d\x97\x7a\x2d\xbd\xd3\x64\xad\x99\x40\xe0\x0c\x7d\xb2\xcd\x81\x86\x77\x91\x7a\xeb\x75\xcd\x8a\xf7\xb4\xbf\x1b\x36\x9d\x2c\x2e\x58\xde\x7b\x65\x89\xff\x83\x66\xe4\x3b\x8b\x6b\x76\xfc\xa1\x56\x2a\x8d\x0c\x69\x07\x10\xf8\xef\x3d\x1b\x2c\xef\xa1\x86\x74\x5b\xc5\xfa\xa9\xdb\x12\xd3\xb2\xa9\x56\xc3\x85\x65\x92\xce\x25\xba\x78\x9f\x2f\x8b\x4b\x1e\x31\x0e\xd3\x45\x20\xf5\x72\x1b\x6d\x58\xc2\x76\x5b\x8a\xae\x94\x1e\xb3\xa9\x5e\x69\xe7\x8d\xea\x9a\x3b\xe3\x5c\xae\xfd\xbe\x4f\xe5\x87\x32\x6e\xc2\x69\x98\xf7\x16\x3e\xcc\x58\x1a\xf3\x19\x0e\xe3\xf8\x72\x4a\x53\xf9\x9e\x09\x49\x53\x9a\x9d\x9d\xaa\xb5\xfb\xe9\x39\xf4\x27\xa9\xde\xe9\x81\x33\xaa\xc6\x5f\xc0\xb7\x93\xc5\x06\x46\x2a\x24\x14\x4b\xfc\xcf\xc5\xde\x60\x0f\x62\x1e\x4d\x46\x34\x95\x78\x40\xe5\x65\x42\x55\xf3\xe5\xdd\xbb\x38\x17\x58\xd9\x0c\x38\x5d\x6c\x71\xac\x8a\xc0\x1a\x09\x65\x87\x32\xea\xec\xb4\x78\x28\x5e\x91\xaf\x6a\x56\x8e\xde\xa7\x4f\x8d\x2f\x95\xa8\xab\x75\xd1\xd5\x1f\x6a\xd1\xf2\xab\xe2\x67\xe2\x2a\xe3\x92\x43\x0f\x12\x1e\xe9\x7d\x13\x3c\x56\x1d\x11\x4f\xa0\xd7\x83\xd3\xa1\x94\x63\xd1\x39\x85\xff\x86\xd3\x99\x50\x8d\x8e\x6a\x74\x4e\x4b\x29\x45\x04\x97\x01\xc4\x2c\x65\xf2\x4c\xd9\x71\x5e\x79\x70\x0e\xcd\x78\x76\x2b\xc6\x61\x44\xff\x15\x8e\x28\xea\x00\xaa\xfe\xac\x15\x3a\x5f\x12\xd2\x34\x1e\x73\x96\x4a\xd4\xd9\x60\xd1\x2f\x70\xda\x6a\x9d\xc2\x2f\xcb\xa1\x21\x17\x12\x7e\xc9\xc5\x95\xac\x6b\x12\xc5\xe4\x3a\xcf\x05\xc6\xd3\xcb\xa5\xf4\xd2\xf3\x7d\x64\xb6\x5a\x80\x04\x15\x62\x55\x22\x42\xe7\x6a\xe4\xe3\x87\xd7\x1f\xe0\x72\x3e\x4e\x78\x46\x41\x0e\x99\x00\xae\x75\xaf\x72\x0f\xc3\x8c\x5e\xa6\xe1\x75\x42\x63\xa4\xee\x54\x26\x74\x5d\xbc\xfc\xa8\xe0\xa9\x0d\xaa\x11\xc9\xd2\x81\x40\x9d\x0a\xc0\x00\x28\xa3\x5f\x26\x54\x48\x1c\x65\x34\xa6\xa9\x64\x61\xa2\x48\x90\x08\x47\xb4\xf8\xc2\xda\x72\x26\xfe\x5e\xb4\xbe\xbf\x38\x59\xbc\x55\x7f\xa1\x2a\xff\x65\xaa\x93\x6e\x4b\xff\x4c\xda\x7f\x02\x00\x00\xff\xff\x97\x2c\x88\x61\x3e\x4d\x00\x00")

func playgroundHtmlBytes() ([]byte, error) {
	return bindataRead(
		_playgroundHtml,
		"playground.html",
	)
}

func playgroundHtml() (*asset, error) {
	bytes, err := playgroundHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "playground.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"playground.html": playgroundHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"playground.html": &bintree{playgroundHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

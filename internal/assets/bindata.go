// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package assets generated by go-bindata.// sources:
// playground.html
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _playgroundHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x7b\x6f\xdb\xb8\x96\xff\x3f\x9f\xe2\xac\x06\x83\xa4\x98\x88\xa6\xde\xb2\xaf\x9d\xdd\x69\x9b\xed\x14\xb7\xb3\xcd\xcc\x2d\xda\x9d\xfd\x4f\x91\x68\x9b\x89\x4c\xaa\x22\xfd\x48\x8b\x7c\xf7\x05\x29\xc9\x96\x5f\xb1\xe2\xda\x99\x5c\x20\x06\x12\xd3\xe4\x79\xfe\xce\x39\xb4\x48\x5a\xea\xfe\xc7\xdb\x8f\x6f\x3e\xfd\x75\x75\x09\x43\x39\x4a\x2f\x4e\x4e\xba\xf3\x77\x12\x25\x17\x27\x00\xdd\x11\x91\x11\xc4\xc3\x28\x17\x44\xf6\xc6\xb2\x6f\x86\xd0\x5a\x0c\xb0\x68\x44\x7a\xc6\x84\x92\x69\xc6\x73\x69\x40\xcc\x99\x24\x4c\xf6\x8c\xb1\x20\xb9\x29\xe2\x28\x8d\xae\x53\xd2\x63\xfc\x1c\x28\xa3\x92\x46\xa9\xee\x24\x3d\x0b\xe1\x73\x18\x51\x46\x47\xe3\xd1\x52\x57\x34\x5b\xeb\x52\x54\x51\x6a\x8e\xa9\xa1\x15\x4b\x2a\x53\x72\xf1\xfd\x3b\x20\xdd\x82\xfb\xfb\x6e\xab\xe8\x53\xa3\x29\x65\xb7\x10\xe7\x5c\x08\x9e\xd3\x01\x65\x3d\x23\x62\x9c\xdd\x8d\xf8\x58\x18\x90\x93\xb4\x67\x08\x79\x97\x12\x31\x24\x44\x1a\x27\x00\x00\xc3\x9c\xf4\x7b\x46\xab\x15\x27\x0c\xdd\x88\x84\xa4\x74\x92\x23\x46\x64\x8b\x65\xa3\xd6\x20\x8f\xb2\xe1\xd7\xd4\xcc\xd2\xe8\x6e\x90\xf3\x31\x4b\xcc\x9c\x44\xb1\x54\xea\x27\x24\x17\x94\x33\xb8\xbf\x6f\x5d\x8f\x69\x9a\xb4\x84\x8c\x24\x8d\x5b\xb1\x10\x2d\xca\x12\x32\x43\xb1\x10\x46\x09\x57\x03\xbb\x86\x3c\x97\xf1\x58\x02\x8d\x39\x3b\xb4\x69\xfd\x68\xa2\xc4\xa2\x8c\x0d\x2a\x8b\x44\x9c\xd3\x4c\x6e\xb3\x49\xeb\x17\x79\x7c\x50\x64\x6e\x44\x6b\x44\x93\x24\x25\xd3\x28\x27\xe8\x46\x18\x17\xdd\x56\x61\xc6\xc5\x49\xb7\x55\xe4\xdc\x49\xf7\x9a\x27\x77\x85\x85\x2a\x52\x20\xef\x32\xd2\x33\x24\x99\x49\x85\xac\xce\x01\xd0\xf9\x0a\xdf\x75\x13\xa0\xcf\x99\x34\xfb\xd1\x88\xa6\x77\x1d\x30\x3e\x66\x84\xc1\xbf\x22\x26\x8c\x73\x10\x11\x13\xa6\x20\x39\xed\xff\xa3\xa4\xe5\x13\x92\xf7\x53\x3e\xed\xc0\x90\x26\x09\x61\x45\xff\xfd\x89\x7e\x53\x9a\xe7\x52\x47\x51\x3e\xa0\xac\x03\xb8\x62\xbd\x8e\xe2\xdb\xc2\xd3\x0e\xfc\x64\x05\x76\xe4\x44\x4b\xdc\x68\x01\xc5\x7b\x36\x17\x63\x4e\xc9\xf5\x2d\x95\x66\xa4\xb2\x58\x52\xce\x3a\xb0\x44\x87\x91\x27\x80\x44\x82\x98\x7c\x2c\xa1\xcf\xf3\x69\x94\x27\xa2\xd2\xb9\x0f\x57\x69\xce\x7f\x55\x9a\x6f\xc9\x5d\x3f\x8f\x46\x44\xc0\x46\x03\xfb\x39\x1f\xcd\x3f\x00\xf0\x2c\x8a\xa9\xbc\xab\xf9\xbd\xf0\x41\xe6\x11\x13\x7d\x9e\x8f\x3a\xa0\x9b\x69\x24\xc9\x5f\x67\x16\xce\x66\xaf\x6a\xc4\x23\xd1\x8c\xb0\x01\x51\xe9\x0a\x80\xe4\x9b\x4c\xb4\x9a\x9a\x88\x1b\xd9\x87\x77\x1a\x87\x6b\x96\xd5\xa1\x7e\x81\xf8\x88\x10\x03\x74\x5b\x7a\x2a\xb8\x38\xd9\x31\x2b\xa0\x7e\x94\x90\x8f\x63\xf9\x50\xf1\x55\x24\x8d\xeb\xae\x09\xc3\xf6\x92\x53\xdc\x87\xcc\x04\xb3\x71\x2a\xac\x52\x36\xa1\x7a\xfe\xc9\xb0\x5a\x6f\x2f\xf8\x1e\x03\xdf\xcd\x79\x5c\xaf\xac\x6d\x40\xff\xad\x2e\x3c\x08\xee\xb3\x49\x81\xed\x89\xfc\x02\xf0\xc1\x01\x5e\xcf\xe4\x28\xcb\x48\x94\x1f\x72\xce\x68\xea\x4d\x13\x5f\xfe\x1d\x67\x8b\x17\x6c\x8f\x87\xed\x7a\xfe\xea\xa5\xf1\x76\x88\x37\x98\xab\x39\x1e\xb2\x74\x9d\xe0\x81\xc1\xcd\xc8\x6d\x55\x6b\xed\x52\x6b\x3d\xa4\xd6\xda\x99\x72\x2f\x70\x6c\xcc\x12\xca\x18\xc9\xdf\xe6\xd1\xb4\x06\x0d\xfe\xb9\x66\xa1\x90\x39\xbf\x25\x66\x12\x89\x21\xef\xf7\x05\x91\x1d\x08\xf0\x9a\x53\xde\x2e\x1e\xcb\x5d\x67\xb2\xf0\x2e\x2e\xdb\xc2\xbb\xe2\xfa\x6f\xea\xc0\x7a\x24\xf8\x58\x3e\xde\x11\x7f\x0f\x9b\x2c\xcf\xde\x05\xea\xdf\x6e\x0b\x1a\xfe\xf6\xe5\xe6\x76\xb2\xb6\x40\x9b\x67\xba\x59\x6c\x45\x75\x00\x67\x33\xf5\x57\x49\x59\xaa\x95\x6d\x44\xbb\xa5\xec\x9e\x0d\x76\xcc\x05\x0f\x71\xae\x2f\x36\xab\xc9\x09\x23\xdb\x13\x90\x52\x46\xa2\x7c\xbe\x74\x54\xbd\x2b\xaf\x4d\xeb\xcf\x3d\x65\x54\x80\x0f\xde\xbc\xfd\xf8\x2d\x79\x01\xbc\x00\xcb\x3d\x00\xe0\x5b\x64\xcc\x33\x7c\xf4\x26\x9e\xd1\x17\xc0\x0b\xb0\xfc\x03\x00\xbe\x45\x46\x05\x38\xf9\x2d\x1a\xfd\xf1\x02\x78\x09\x56\xb8\x8c\x95\xb3\x0f\xe0\x5b\x64\x54\x80\x5f\xdf\x0d\x07\xef\xc6\x2f\x80\x2b\xb0\x2c\x84\x97\xc1\xb2\x1e\x0f\xf8\x56\x19\x15\xe0\x69\xfa\xeb\x3f\xaf\x5e\xf0\x2e\xb0\xb2\x7f\x38\xc1\xb7\xca\x98\x27\xf8\x20\x7d\xff\xee\xf7\x06\x80\xfb\x6e\x36\x03\x3b\xdc\x05\xf9\x1a\x59\x13\x49\xcf\x0a\xf6\x27\xb9\x54\xb9\x15\xb3\x3f\xdf\xbf\x6f\x00\x7b\xdb\x43\xed\xd0\xc3\x18\xfb\x16\x76\x3c\xcb\xf3\xb3\x19\xb8\x3e\xf2\x2c\x8c\x31\xb6\xed\x30\x0c\xad\xd0\xf1\x77\x45\xe5\xb1\x52\x0e\x60\xc7\x33\x8b\xe9\x13\x5c\x0d\xc5\x5f\xf2\xd7\xa3\xeb\x86\x31\x0d\x2c\xdf\xf6\xed\xd0\x0a\x9c\x50\x95\x02\x84\x0e\x72\xdb\x18\x63\xcb\x0f\x42\xd7\xf7\x77\xd6\xd9\xe3\x64\xfc\xb0\x0d\xcf\x2c\x9a\x4f\x70\xa9\xf5\x85\x8d\x45\x93\x60\xea\xd9\xcc\xc2\x16\x6a\x07\xed\x76\xdb\x0b\xec\xc0\x73\xda\x78\x67\x45\xee\x64\xdb\x47\xd3\x33\x8b\xd2\x53\x5c\x9f\xf5\xaf\xbe\xf6\x1b\x44\xc9\xb1\x11\x76\xda\xa1\x6d\xf9\xb6\x1b\x78\x5e\xe8\xef\x51\x72\x8f\x93\xf1\xc3\x36\x3c\xab\x60\x3e\xc9\xb5\x1f\x49\xfe\x7c\xf3\xe9\x7f\x9a\x46\xd3\xf1\x3c\xdb\xf2\x55\x2d\x84\xd8\xdb\xeb\x5b\xf1\xd1\x62\x0e\x61\xc9\x33\x0b\xab\xfd\xc3\x35\xba\xf3\x12\x93\x5e\xbe\xfb\xfc\x65\xb1\x09\xb7\x7e\x30\x52\xdb\x54\x8b\xf2\x3c\xba\xab\x6f\xc4\x6d\x70\xa9\xbe\xb3\xb7\xf9\x97\x0a\x80\x91\xb3\xf2\x12\xe7\x8b\x13\x1b\x8c\xac\x86\x4c\x1b\xc0\xf8\x1b\xb4\xaf\x61\x60\x52\x49\xf2\xa2\x15\xf3\x31\x93\x1d\xb0\xce\x17\xe7\x38\x8d\xc8\xe6\x13\xa8\xe0\x71\x32\x7b\xe2\xe0\x78\xfb\xc0\xb3\xc6\xb4\x6f\x70\x0e\xab\xfd\x98\xc1\xb9\xf9\xf5\xff\xfe\x77\x74\xf5\xc4\xc1\x09\x96\x1d\x75\x1b\xc1\xb3\xc6\xb4\x6f\x70\x0e\xab\xfd\x98\xc1\x19\xfe\x8b\xfc\x9a\x3f\x75\xe5\xb4\xf7\xc9\xdd\x35\xa6\x7d\x83\x73\x58\xed\x47\x9d\xd6\x3e\x0f\xbe\xbe\xbb\x7d\xd2\xe0\x58\xc8\x7a\x3c\x3c\x1b\x98\xf6\x0b\xce\xa1\xb5\x1f\xb5\x72\x2e\xff\xfb\xeb\x6b\xf9\xc4\xc1\x71\xf6\x81\x67\x8d\x69\xdf\xe0\x1c\x56\xfb\x31\x83\x93\x7c\xbb\xfc\xe7\x9b\xdf\x1f\x17\x1c\xfc\x40\x70\xea\x87\xdb\x95\x9f\x94\xad\xb9\xea\x2f\xbd\x82\x35\x7c\xd6\xaf\x3a\xd7\x58\x36\xc4\xe6\xe9\x95\x37\x08\x0d\x65\x7d\xca\xa8\x24\xcd\x22\xb4\x46\x5d\x05\xea\xed\x5f\xec\xea\x91\x5f\x3f\x3f\x1e\xa7\x95\xcb\x20\xbb\x01\x54\x6b\x2c\x7b\xc7\xe9\x90\xca\x9f\x2e\x4e\xc3\x9b\xab\xcb\x5f\xff\x78\xea\x40\x05\x78\xe9\xd5\x04\xab\x35\x96\xbd\x03\x75\x48\xe5\x4f\x16\xa8\x9f\x52\x1e\x25\x94\x0d\xcc\x69\xae\x8c\xcd\xe7\x11\xcb\xb8\xa0\x85\xf7\xd1\xb5\xe0\xe9\x58\x92\x4a\xcb\x94\x26\x72\xd8\x01\x0b\xe3\xc9\xb4\xea\x1b\x12\x3a\x18\xca\xa2\x73\x58\x75\x26\x54\x64\xa9\x8a\x6c\xe5\xcd\x35\x9f\x6d\x1d\xeb\xa7\x64\xc3\xe0\x48\xe8\x81\x4d\x8c\x75\x86\x39\x5c\x29\x1d\x68\xe7\x47\xa2\x03\x31\x61\x92\xe4\xab\x24\xd7\x7c\x56\x90\xad\x11\x94\xba\x36\x8f\x36\x94\x9c\x45\xf1\xed\xb6\xf1\x9b\xb1\x90\xb4\x7f\x67\x96\xf7\xd0\x6d\xd5\xbf\x49\xc6\x2e\xde\x1a\x88\x66\x42\x73\x12\x17\xa1\x8b\x79\x3a\x1e\xb1\x35\x0d\x5b\x29\x1e\x1a\x9d\x9f\x55\xf2\xc1\xe2\x87\x70\x65\x2e\x04\xde\x62\xaf\xa7\x4a\x85\x7a\x5f\x71\xab\x95\x79\xcd\xa5\xe4\xa3\x0e\xd8\xb5\xd3\xc7\xf5\x99\x61\xcb\x3d\x1d\x8f\xb9\x95\xaa\x01\x7d\xe5\x8e\x24\x33\xb9\x7c\xa3\x99\xa0\xdf\x48\x07\x1c\x7b\x61\xa3\xee\x9e\x96\x7e\xd9\x78\x6e\xa9\xe2\xdd\x9c\x2e\x31\x4f\x79\xde\x81\x7c\x70\x1d\x9d\xd9\x9e\x77\x0e\x8b\x7f\x18\xf9\xaf\x9e\x8b\xf3\xc9\xbb\xfe\x6f\xfd\x78\xd9\xfd\xca\x4f\xb7\xf2\x73\xe9\x06\x1d\x80\x6e\x42\x27\x40\x93\x9e\xb1\x32\x73\x94\xb7\xe8\x74\xc5\x64\x00\x71\x1a\x09\xa1\x28\x06\xdc\x80\x09\x25\xd3\xd7\x7c\xd6\x33\x30\x60\xb0\xec\x50\xfd\x19\x30\x1b\xa5\x4c\x74\x66\x29\x65\xb7\x3d\x63\x28\x65\xd6\x69\xb5\xa6\xd3\x29\x9a\x3a\x88\xe7\x83\x96\xd5\x6e\xb7\x5b\x7a\xb4\x94\x3b\xbf\x31\xf4\x5d\x1e\x65\xc3\x3f\x3e\xc0\xd5\xfc\x46\x2c\xf8\xc0\x07\xbc\x76\x8f\xa8\x26\x4e\x48\x5f\x54\x1f\x8a\xdb\x33\x49\x94\xbf\xcb\xa3\x84\x12\x26\x0b\xfb\x97\xba\x4c\xcb\x80\x99\xd5\x33\x5c\x14\xfa\x3f\x1b\x30\xb3\x7b\x46\xdb\x47\xb6\xf5\xb3\x01\x77\x56\xcf\xc0\xea\x5d\xf5\xb5\x91\xef\xff\x6c\x2c\x24\xeb\x1b\x96\x78\x06\xea\x9f\xa9\xc3\xde\x33\x7e\xba\xc4\x18\x87\xb6\x51\x74\x96\x41\xee\x19\x28\x34\xa0\xf8\xfd\x9c\x96\x77\xa1\x40\xe5\x59\x43\x51\x15\xa3\x85\x37\xb1\x76\x5b\xcb\xde\xcc\x61\x68\xd5\x71\xe8\x0e\x6a\x1c\xaa\xc8\x35\x0e\x15\x8f\x51\x54\x73\xcf\xb0\xec\x00\xb5\x7d\xa3\xac\xe4\xc5\xe7\xbb\x9e\x61\x19\xd0\xa7\x69\xda\x33\xc6\x79\x7a\xf6\xd3\x2a\x82\xaf\x0c\xc8\x67\x3d\xc3\x55\xf6\x29\xf1\x35\x6d\x59\x24\x87\x5a\xdb\x6b\x9e\x27\x24\xaf\xc4\xcc\xdd\x53\x1f\xcd\x7c\x9c\x92\x9e\xc1\x38\xfb\x46\x72\x6e\xd4\x70\x49\x7a\xc6\xef\x2e\x0a\xc0\x46\xa1\x1b\x9b\x16\xf2\x42\xc0\xa6\x8d\x42\x1f\x2c\x64\x87\x45\xcb\x46\xa1\x37\xb1\x2c\x1f\x79\x41\x8c\xd5\x45\x50\xa0\x07\x35\x8f\x1e\xd4\xad\x61\x49\xa1\xc7\xb1\xee\x32\x2d\x64\xfb\x45\xcb\x46\xa1\xf3\xd9\x43\x7e\x10\x63\xa5\xc5\xd3\x43\xba\x77\xf1\xef\x37\x17\xf9\xc1\x37\x6d\x0e\x2e\xa4\x85\xb1\x83\x2c\x17\x30\x78\xc8\x57\xfa\x3c\xaf\x68\x79\x28\x98\x94\x04\x18\x14\x89\x69\x23\xcf\xd5\x63\x66\x49\xe0\x87\x4a\x5c\x18\x9b\x0e\xb2\x1c\xc0\xba\x5b\x53\x99\x73\x2a\x65\x4f\xf8\xc6\xb4\x94\x60\xe5\xaf\xe7\x01\x06\xad\xfd\x9b\x51\x4f\x00\x85\xf0\x2a\xe0\x65\x1d\x16\x3f\x77\x30\x60\xd6\x33\x7c\x57\xc7\x51\x55\x60\x19\x81\x7e\xbf\x6f\x68\x80\x7d\x17\x1c\x3f\x36\x5d\xe4\xda\x80\xcd\xd0\x74\x90\x17\x9a\xa1\x19\x8a\xa2\x01\xfa\x0f\xd4\x07\x50\x1f\x8a\x86\xea\xab\x47\x4a\x4f\x13\x3d\x63\xd3\x6f\xe0\xcf\x2c\x8c\xb3\xd9\x39\xe8\xb7\x57\xff\x50\x49\xf2\x80\xcd\xc5\x6f\x05\xb4\xcd\x6b\xa7\xf0\xda\x85\xf5\xf3\x86\x25\x97\x56\xb2\x27\x6c\x23\xec\x82\x87\x91\x67\xc7\xa6\x8d\x6c\xd3\x51\xf1\x46\x6d\x33\x44\x81\x03\x36\x6a\xbb\xa6\x85\x51\xdb\x07\xa7\x88\xb3\x0d\x21\x0a\x6c\x13\xb5\x41\x75\x7b\x9a\x02\x54\xb7\xe2\x43\x6d\x35\xaa\xc8\xda\xae\x1e\xf7\x95\x38\x45\x64\x2b\x79\x3e\x6a\x6b\x61\x81\x26\x38\x0a\x3a\xb1\x3e\x75\x9f\xa3\xb3\x74\xa6\xad\xd1\x59\x3d\x62\x7b\x08\x1b\x0b\xdb\xca\xa3\x00\x79\x1a\x1a\xed\xa2\x19\x20\x0b\x3c\x64\x79\xda\x13\xb7\x40\xc8\x29\x6a\xc4\x36\x3d\x95\xcc\x01\xb2\x6c\xb3\x86\x5c\x85\x2a\xe8\x01\xc5\x5b\x60\x57\xc0\xe4\x14\x35\x6a\x3b\x4a\xaa\xaf\x69\x60\x81\xdf\x51\x40\xd2\x87\xd9\xf5\xac\x5f\x3f\x46\x7e\x08\x16\xdf\x05\xcb\xc2\xba\x20\x9c\xb2\x20\x7c\x55\x0f\x08\xab\xfa\x70\x91\xab\x9c\xf2\x82\xa2\xa3\xe8\x17\x8b\xfa\x40\xd8\x8e\x55\x9d\x2a\xd4\xbc\x40\x7f\x36\x8b\xee\xa3\xf8\xaa\x8f\x84\xb5\xaf\x6b\x07\xae\x8f\xce\x07\xdb\x43\xd6\x22\x1d\xd6\x2a\xc5\x39\x5c\xa5\xb8\x65\xa5\x78\xc7\xab\x94\xe2\x78\x75\x81\xcc\xd2\xb1\xe5\x1e\x13\x89\x13\x2a\xdf\x17\x13\xc9\xbc\x5a\xec\x45\xb9\x78\xf3\x72\xb1\xab\x72\xb1\xe7\xe5\x62\x37\x2d\x17\x67\x5e\x2e\xee\x93\x94\x4b\x71\x62\x69\x94\x2b\xf3\xea\x9b\xa1\x5c\xa7\x97\x97\x06\xee\xbc\x43\x7d\xf7\xc7\x51\xd6\x33\xf4\x25\xd8\x52\xf7\x0d\xa7\xac\xea\x5f\xad\x29\x47\x7d\x7f\xd9\x01\xf2\x52\x47\x4d\x3a\x56\xdb\x54\xef\xa6\xd5\xfe\xb6\x2b\xc1\xf5\x91\xdd\x71\xad\x6b\xfb\xe0\xfa\x13\x27\x34\x9d\x70\x97\x39\xc5\x21\xd5\xb1\xcd\x41\xae\x07\xa1\x8b\xbc\xd4\x2c\xd1\x82\x86\x68\x15\xc7\x34\x47\x8e\xa5\xab\xcc\xb3\xb0\x53\xd9\x67\x96\xf6\x41\x83\x68\xea\x93\x8a\xe3\xda\xe7\xd8\x10\xba\x9f\x75\x40\x77\xc2\xa5\xf7\xe6\x8f\x6c\x8e\xbe\x74\x53\x93\x4d\x5a\x82\x65\x36\x04\xab\xd8\x9c\x36\xf4\xe5\xf3\xa7\x9c\x46\x6c\x90\x12\xf3\xb5\x5e\x4b\xef\x34\x59\x6b\xc6\x10\xba\xc3\x00\x6f\x73\xa0\xe1\x55\xa4\xde\x7a\x5d\xb1\xe2\x03\xe9\xef\x86\x4d\x27\x8b\x07\xb6\xff\x41\x59\x12\xfc\xa0\x19\xc5\xce\xe2\x8a\x1d\x7f\xaa\x95\x4a\x23\x43\xda\x21\x84\xc1\x07\xdf\x01\xdb\x7f\xac\x21\xdd\x56\xb9\x7e\xea\xb6\xc4\xa4\x6a\xaa\xd5\x70\x69\x99\x24\x33\x69\x5c\x7c\x28\x96\xc5\x15\x8f\xc8\x22\x36\x0f\xa4\x5e\x6e\x1b\x1b\x96\xb0\xdd\x96\xa2\xab\xa4\x27\x74\xa2\x57\xda\x45\xa3\xbe\xe6\xce\x39\x97\x2b\xcf\xf7\xa9\x3d\x28\xe3\x26\x9a\x44\x45\x6f\xe9\xc3\x94\xb2\x84\x4f\x51\x94\x24\x97\x13\xc2\xe4\x07\x2a\x24\x61\x24\x3f\x3b\x55\x6b\xf7\xd3\x73\xe8\x8f\x99\xde\xe9\x81\x33\xa2\xc6\x5f\xc1\xf7\x93\xf9\x06\x06\x13\x12\xca\x25\xfe\x97\x72\x6f\xb0\x07\x09\x8f\xc7\x23\xc2\x24\x1a\x10\x79\x99\x12\xd5\x7c\x7d\xf7\x3e\x29\x04\xd6\x36\x03\x4e\xe7\x5b\x1c\xcb\x22\x90\x46\x42\xd9\xa1\x8c\x3a\x3b\x2d\x6f\x8a\x57\xe4\xcb\x9a\x95\xa3\x0f\xe9\x53\xe3\x0b\x25\xea\xd3\xaa\xe8\xfa\x83\x5a\xb4\xfc\xba\xf8\xa9\xb8\xca\xb9\xe4\xd0\x83\x94\xc7\x7a\xdf\x04\x65\xaa\x23\xe6\x29\xf4\x7a\x70\x3a\x94\x32\x13\x9d\x53\xf8\x4f\x38\x9d\x0a\xd5\xe8\xa8\x46\xe7\xb4\x92\x52\x46\x70\x11\x40\x44\x19\x95\x67\xca\x8e\xf3\xda\x8d\x73\x06\x61\x49\xc6\x29\x93\x46\x67\x83\xa2\x5f\xe0\xb4\xd5\x3a\x85\x5f\x16\x43\x43\x2e\x24\xfc\x02\xc6\xf7\xef\x80\x2a\x56\xb8\xbf\x37\xce\x17\x12\xc5\xf8\xba\x08\x31\xe5\xec\x72\x21\xbd\x72\x68\x1f\x99\xad\x16\x18\x82\x08\xb1\x2c\xd1\x30\xce\xd5\xc8\xa7\x8f\x6f\x3f\xc2\xe5\x2c\x4b\x79\x4e\x40\x0e\xa9\x00\xae\x75\x2f\x73\x0f\xa3\x9c\x5c\xb2\xe8\x3a\x25\x89\xa1\x2e\x40\xc6\xa4\x6e\x32\x91\x9f\xa8\x4c\x89\xd1\x81\x7e\x94\x0a\xa2\xe5\x2a\x14\x48\x2c\x45\x71\x3f\x6f\x3c\x8c\xd8\x80\xb2\x01\xc8\x21\x81\x78\x2c\x24\x1f\x41\x16\x0d\x08\x14\x8f\x00\xbb\xbe\x03\xfd\xec\x29\x33\xe6\xa3\x8c\x33\xc2\xa4\x58\x12\x2f\x29\x1b\x08\xa3\x53\x43\x1e\xc0\xc8\xc9\xd7\x31\x11\x12\xc5\x39\x49\x08\x93\x34\x4a\x15\x89\x21\xa2\x11\x29\x7f\xc9\xb6\x98\xa2\xef\xcb\xd6\xfd\xab\x93\xf9\x5b\xfd\xd1\x55\xc5\x23\xab\x4e\xba\x2d\xfd\xfc\xb4\xff\x0f\x00\x00\xff\xff\xb9\x8c\xa0\xd0\x57\x4d\x00\x00")

func playgroundHtmlBytes() ([]byte, error) {
	return bindataRead(
		_playgroundHtml,
		"playground.html",
	)
}

func playgroundHtml() (*asset, error) {
	bytes, err := playgroundHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "playground.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"playground.html": playgroundHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"playground.html": &bintree{playgroundHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

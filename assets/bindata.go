// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package assets generated by go-bindata.// sources:
// playground.html
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _playgroundHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x69\x6f\xdb\xb8\xd6\xfe\x9e\x5f\xc1\x57\x45\xd1\x14\x88\x68\x92\xda\x3d\x76\xf0\x76\xc9\x4d\x8b\xc9\xdc\x66\x16\xb4\x77\xee\x37\x46\xa2\x6c\x26\xb2\xe4\x4a\xf4\x96\xc1\xfc\xf7\x0b\x52\x8b\x17\xd9\xb1\xe2\xd8\x6e\x06\x88\x81\x44\x12\x79\xd6\xe7\x9c\x43\x8b\xa4\xa5\xce\xff\x7d\xfc\xf2\xe1\x8f\x3f\xaf\x2f\x40\x5f\x0c\xa2\xf3\x93\x93\x4e\x75\x64\x34\x38\x3f\x01\xa0\x33\x60\x82\x02\xbf\x4f\xd3\x8c\x89\xee\x48\x84\xba\x0b\x5a\xf3\x8e\x98\x0e\x58\x57\x1b\x73\x36\x19\x26\xa9\xd0\x80\x9f\xc4\x82\xc5\xa2\xab\x8d\x32\x96\xea\x99\x4f\x23\x7a\x13\xb1\x6e\x9c\x9c\x01\x1e\x73\xc1\x69\xa4\x1a\x59\x17\x43\x74\x06\x06\x3c\xe6\x83\xd1\x60\xa9\x89\x4e\x6b\x4d\x92\x8a\x46\xfa\x88\x6b\x4a\xb1\xe0\x22\x62\xe7\x97\x29\x1d\xf6\x7f\xbd\x02\xd7\x11\x9d\xf5\xd2\x64\x14\x07\x9d\x56\xde\x23\x69\x22\x1e\xdf\x81\x94\x45\x5d\x2d\x13\xb3\x88\x65\x7d\xc6\x84\x06\xfa\x29\x0b\xbb\x5a\xab\xe5\x07\x31\xbc\xcd\x02\x16\xf1\x71\x0a\x63\x26\x5a\xf1\x70\xd0\xea\x49\x81\xdf\x23\x7d\x58\x09\xd4\x53\x46\x7d\xd1\xba\x19\xf1\x28\x68\x65\x82\x0a\xee\xb7\xfc\x2c\x6b\xf1\x38\x60\x53\xe8\x67\x99\x56\x40\xb1\xa0\xad\x9f\xa4\xc2\x1f\x09\xc0\xfd\x24\x7e\x9a\xc2\x90\x8e\xa5\x10\x38\x8c\x7b\xa5\x9e\xcc\x4f\xf9\x50\x80\x2c\xf5\x9f\xe8\xc5\x6d\xd6\x1a\xf0\x20\x88\xd8\x84\xa6\x0c\xde\x66\xda\x79\xa7\x95\x0b\x97\xb1\x6f\xe5\xc1\x3f\xe9\xdc\x24\xc1\x2c\x57\x2c\x41\x04\x62\x36\x64\x5d\x4d\xb0\xa9\x90\x30\xa8\x60\x00\x95\x38\xe0\x2f\x75\x0a\x40\x98\xc4\x42\x0f\xe9\x80\x47\xb3\x36\xd0\xbe\x0c\x59\x0c\x7e\xa7\x71\xa6\x9d\x81\x8c\xc6\x99\x9e\xb1\x94\x87\x3f\x15\xb4\xc9\x98\xa5\x61\x94\x4c\xda\xa0\xcf\x83\x80\xc5\x79\xfb\xdf\x27\xea\x20\x35\x57\x52\x07\x34\xed\xf1\xb8\x0d\x50\xc9\x7a\x43\xfd\xbb\xdc\xb9\x36\x78\x85\x1d\x42\x0d\xba\xc4\x0d\xe7\xde\x7f\x8e\x2b\x31\xfa\x84\xdd\xdc\x71\xa1\x53\x99\x4e\x82\x27\x71\x1b\x2c\xd1\x21\x68\x65\x80\xd1\x8c\xe9\xc9\x48\x80\x30\x49\x27\x34\x0d\xb2\x52\xe7\x2e\x5c\x85\x39\xff\x5f\x6a\xbe\x63\xb3\x30\xa5\x03\x96\x81\xb5\x06\x86\x69\x32\xa8\x2e\x00\x48\x86\xd4\xe7\x62\xb6\xe0\xf7\xdc\x07\x91\xd2\x38\x0b\x93\x74\xd0\x06\xea\x34\xa2\x82\xfd\x79\x8a\xd1\x70\xfa\x76\x81\x78\x90\x35\x23\x6c\x40\xf4\x77\x71\x14\xc9\x3a\x0b\x71\x53\x0b\x51\x23\xf3\xd0\x56\xdb\xd0\x8a\x61\x25\xd2\x2f\x08\x1f\x0e\x61\x00\x3a\x2d\x35\x10\x9c\x9f\x6c\x19\x13\x60\x48\x03\xf6\x65\x24\x1e\x2a\xbd\x92\xa4\x71\xd5\x35\x61\xd8\x5c\x70\x92\x7b\x9f\x89\xa0\x37\xce\x84\x55\xca\x26\x54\xcf\x3e\x17\x56\xab\xed\x05\xde\x03\xc0\xbb\x3e\x8b\x17\xeb\x6a\x13\xce\x3f\xdc\x85\x4d\xd8\x3e\xab\x04\x58\x9f\xc6\x2f\xf8\xee\x1b\xdf\x7a\x1e\xd3\xe1\x90\xd1\x74\x9f\x03\x46\x53\x6f\x9a\xf8\xf2\x0f\x1c\x2a\x5e\xa0\x3d\x18\xb4\xf5\xec\x55\x73\xd3\xcd\x08\xaf\x31\x57\x71\x3c\x64\x69\x9d\xe0\x81\xce\xb5\xc0\x6d\xd4\x8a\xb7\x69\xc5\x0f\x69\xc5\x5b\x13\xee\x05\x8d\x75\x39\xc2\xe3\x98\xa5\x1f\x53\x3a\x59\x40\x06\xbd\x5e\xb0\x30\x13\x69\x72\xc7\xf4\x80\x66\xfd\x24\x0c\x33\x26\xda\xc0\x41\xab\x3e\x59\xdb\x58\xb0\x59\xe3\xc1\x68\x1b\x13\xc1\x68\x5b\x50\xff\x91\xe6\xd7\xa3\x90\x8c\xc4\xe3\xdd\xb0\x1f\x6f\x12\xb6\xc8\x36\x44\x7f\xb4\x29\xb0\xff\xe9\xdb\xed\xdd\xb8\x36\x25\xab\x72\x5c\x4f\x52\x9e\x2f\xb3\x0c\xa7\xf2\xaf\x94\xb2\x54\x25\x9b\x88\xb6\x4b\xd9\x3e\x0c\x6c\x19\x04\x1e\xe2\xac\x4f\x2f\xcb\x51\x09\x41\x62\x65\x20\xe2\x31\xa3\x69\x35\x59\x94\xad\x2b\x9f\x75\x33\xce\x1d\x65\x94\x80\xf7\x3e\x7c\xfc\x72\x1f\xbc\x00\x9e\x83\x65\xee\x01\xf0\x0d\x32\xaa\x0c\x1f\x7c\xf0\xa7\xfc\x05\xf0\x1c\x2c\x7b\x0f\x80\x6f\x90\x51\x02\xce\x3e\xd1\xc1\xaf\x2f\x80\x17\x60\xb9\xcb\x58\x19\xbb\x00\xbe\x41\x46\x09\xf8\xcd\xac\xdf\xbb\x1c\xbd\x00\x2e\xc1\xc2\x10\x2d\x83\x85\x1f\x0f\xf8\x46\x19\x25\xe0\x51\xf4\xee\xe7\xeb\x17\xbc\x73\xac\xc8\x93\x13\x7c\xa3\x8c\x2a\xc1\x7b\xd1\xe7\xcb\x5f\x1a\x00\x6e\x9b\xc3\x29\x20\xee\x36\xc8\x6b\x64\x4d\x24\x3d\x2b\xd8\x8f\x72\xab\x72\x97\x4d\x7f\xfb\xfc\xb9\x01\xec\x9e\x05\x3d\xd7\x42\x08\xd9\x18\x19\x16\xb6\xec\xe1\x14\x98\x36\xb4\x30\x42\x08\x11\xe2\xba\x2e\x76\x0d\x7b\x5b\x54\x1e\x2b\x65\x0f\x76\x3c\xb3\x98\x1e\xe1\x6e\xc8\xff\x96\xbe\x1f\xdc\x34\x8c\xa9\x83\x6d\x62\x13\x17\x3b\x86\x2b\x4b\x01\xb8\x06\x34\x3d\x84\x10\xb6\x1d\xd7\xb4\xed\xad\x75\xf6\x38\x19\x4f\xb6\xe1\x99\x45\xf3\x08\xb7\x5a\xdf\xe2\x51\xd6\x24\x98\x6a\x34\xc3\x08\x43\xcf\xf1\x3c\xcf\x72\x88\x63\x19\x1e\xda\x5a\x91\x5b\xd9\x76\xd1\xf4\xcc\xa2\x74\x8c\xfb\xb3\xf0\xfa\x7b\xd8\x20\x4a\x06\x81\xc8\xf0\x5c\x82\x6d\x62\x3a\x96\xe5\xda\x3b\x94\xdc\xe3\x64\x3c\xd9\x86\x67\x15\xcc\xa3\xdc\xfb\xb1\xe0\xb7\x0f\x7f\xfc\xbb\x69\x34\x0d\xcb\x22\xd8\x96\xb5\xe0\x22\x6b\xa7\x6f\xc5\x47\x8b\xd9\x87\x25\xcf\x2c\xac\xe4\xc9\x35\xba\xf5\x16\x93\x5f\x5c\x7e\xfd\x36\x5f\x83\xab\xef\x87\x2c\x2c\xaa\xd1\x34\xa5\xb3\xc5\x75\xb8\x35\x2e\x2d\x2e\xec\xad\xff\x6d\x02\x40\xd0\x58\xf9\x64\x67\xf3\x8d\x1a\x04\x71\x43\xa6\x35\x60\xfc\x00\xed\x35\x0c\x74\x2e\x58\x9a\x9f\xf9\xc9\x28\x16\x6d\x80\xcf\xe6\xfb\x37\x8d\xc8\xaa\x01\x34\x4b\xfc\x60\x7a\xe4\xe0\x58\xbb\xc0\x53\x63\xda\x35\x38\xfb\xd5\x7e\xc8\xe0\xdc\xbe\xfb\xef\x7f\x06\xd7\x47\x0e\x8e\xb3\xec\xa8\xd9\x08\x9e\x1a\xd3\xae\xc1\xd9\xaf\xf6\x43\x06\xa7\xff\x3b\x7b\x97\x1e\xbb\x72\xbc\x5d\x72\xb7\xc6\xb4\x6b\x70\xf6\xab\xfd\xa0\xc3\xda\xd7\xde\xf7\xcb\xbb\xa3\x06\x07\x43\xfc\x78\x78\xd6\x30\xed\x16\x9c\x7d\x6b\x3f\x68\xe5\x5c\xfc\xeb\xfb\x7b\x71\xe4\xe0\x18\xbb\xc0\x53\x63\xda\x35\x38\xfb\xd5\x7e\xc8\xe0\x04\xf7\x17\x3f\x7f\xf8\xe5\x71\xc1\x41\x0f\x04\x67\x71\x63\xbb\xf4\x93\xc7\x35\x57\xed\xa5\x8f\x53\xc3\xa7\x7e\xd7\x59\x63\x59\x13\x9b\xe3\x2b\x6f\x10\x1a\x1e\x87\x3c\xe6\x82\x35\x8b\x50\x8d\xba\x0c\xd4\xc7\x3f\xe3\xeb\x47\x7e\xfd\x3c\x3d\x4e\x2b\xb7\x41\xa4\x01\x54\x35\x96\x9d\xe3\xb4\x4f\xe5\xc7\x8b\x53\xff\xf6\xfa\xe2\xdd\xaf\xc7\x0e\x94\x83\x96\x3e\x4d\xb0\xaa\xb1\xec\x1c\xa8\x7d\x2a\x3f\x5a\xa0\x5e\x45\x09\x0d\x78\xdc\xd3\x27\xa9\x34\x36\xad\x22\x36\x4c\x32\x9e\x7b\x4f\x6f\xb2\x24\x1a\x09\x56\x6a\x99\xf0\x40\xf4\xdb\x00\x23\x34\x9e\x94\x6d\x7d\xc6\x7b\x7d\x91\x37\xf6\xcb\xc6\x80\x67\xc3\x48\x46\xb6\xf4\xe6\x26\x99\x6e\xec\x0b\x23\xb6\xa6\x73\x90\xa9\x8e\x75\x8c\x8b\x0c\x15\x5c\x11\xef\x29\xe7\x07\x59\x1b\xf8\x2c\x16\x2c\x5d\x25\xb9\x49\xa6\x39\x59\x8d\xa0\xd0\xb5\xbe\xb7\xa1\xe4\x21\xf5\xef\x36\xf5\xdf\x8e\x32\xc1\xc3\x99\x5e\x3c\xbc\xb6\x51\xff\x3a\x19\xdb\x78\x17\x40\xd4\x03\x9e\x32\x3f\x0f\x9d\x9f\x44\xa3\x41\x5c\xd3\xb0\x91\xe2\xa1\xde\x6a\xaf\x32\xe9\xcd\x7f\x02\x57\xe4\x82\x63\xcd\xd7\x7a\xca\x54\x58\x6c\xcb\x1f\xad\xd2\x6f\x12\x21\x92\x41\x1b\x90\x85\xdd\xc7\xfa\xc8\xb0\xe1\x29\x8e\xc7\x3c\x3a\xd5\x80\xbe\x74\x47\xb0\xa9\x58\x7e\xb0\x2c\xe3\xf7\xac\x0d\x0c\x32\xb7\x51\x35\x4f\x0a\xbf\x08\xaa\x2c\x95\xbc\xeb\xd3\xc5\x4f\xa2\x24\x6d\x83\xb4\x77\x43\x4f\x89\x65\x9d\x81\xf9\x3f\x04\xed\xb7\xcf\xc5\xf9\xe0\x32\xfc\x14\xfa\xcb\xee\x97\x7e\x9a\xa5\x9f\x4b\x8f\xe4\x00\xd0\x09\xf8\x18\xf0\xa0\xab\xad\x8c\x1c\xc5\x43\x39\x9d\x6c\xdc\x03\x7e\x44\xb3\x4c\x52\xf4\x12\x0d\x8c\x39\x9b\xbc\x4f\xa6\x5d\x0d\x01\x04\x30\x71\xe5\x9f\x06\xa6\x83\x28\xce\xda\xd3\x88\xc7\x77\x5d\xad\x2f\xc4\xb0\xdd\x6a\x4d\x26\x13\x38\x31\x60\x92\xf6\x5a\xd8\xf3\xbc\x96\xea\x2d\xe4\x3e\xf0\x44\x26\xb8\x4a\x7a\xc9\xc2\x63\x99\x8a\x38\x60\x61\x56\x5e\xe4\xcf\x4e\x32\x9a\x5e\xa6\x34\xe0\x2c\x16\xb9\xfd\x4b\x4d\x3a\xd6\xc0\x14\x77\x35\x13\xba\xf6\x6b\x0d\x4c\x49\x57\xf3\x6c\x48\xf0\x6b\x0d\xcc\x70\x57\x43\xf2\x28\xdb\x3c\x68\xdb\xaf\xb5\xb9\x64\xf5\x88\x52\x32\x04\xf2\x9f\xae\xc2\xde\xd5\x5e\x5d\x20\x84\x5c\xa2\xe5\x8d\x45\x90\xbb\x1a\x74\x35\x90\xff\x7e\x4e\xc9\x3b\x97\xa0\x26\xc3\x86\xa2\x4a\x46\x8c\xd6\xb1\x76\x5a\xcb\xde\x54\x30\xb4\x16\x71\xe8\xf4\x16\x38\x64\x91\x2b\x1c\x4a\x1e\x2d\xaf\xe6\xae\x86\x89\x03\x3d\x5b\x2b\x2a\x79\x7e\x3d\xeb\x6a\x58\x03\x21\x8f\xa2\xae\x36\x4a\xa3\xd3\x57\xab\x08\xbe\xd5\x40\x3a\xed\x6a\xa6\xb4\x4f\x8a\x5f\xd0\x36\xa4\xa2\xaf\xb4\xbd\x4f\xd2\x80\xa5\xa5\x98\xca\x3d\x79\xa9\xa7\xa3\x88\x75\xb5\x38\x89\xef\x59\x9a\x68\x20\xe8\x6a\xbf\x98\xd0\x01\x04\xba\xa6\xaf\x63\x68\xb9\x00\xe9\x04\xba\x36\xc0\x90\xb8\xf9\x19\x81\xae\x35\xc6\xd8\x86\x96\xe3\x23\x79\xeb\xe3\xa8\x4e\xc5\xa3\x3a\xd5\x59\xbf\xa0\x50\xfd\x48\x35\xe9\x18\x12\x3b\x3f\x23\xd0\x35\xbe\x5a\xd0\x76\x7c\x24\xb5\x58\xaa\x4b\xb5\xce\xff\x7d\x32\xa1\xed\xdc\x2b\x73\x50\x2e\xcd\xf5\x0d\x88\x4d\x80\x80\x05\x6d\xa9\xcf\xb2\xf2\x33\x0b\x3a\xe3\x82\x00\x01\x49\xa2\x13\x68\x99\xaa\x4f\x2f\x08\x6c\x57\x8a\x73\x7d\xdd\x80\xd8\x00\x48\x35\x2b\x2a\xbd\xa2\x92\xf6\xb8\x1f\x74\x2c\x05\x4b\x7f\x2d\x0b\x20\xa0\xb4\xdf\x4b\x74\x25\x9c\xab\xe8\x16\x45\x97\xff\xb6\x41\x03\xd3\xae\x66\x9b\x2a\x68\xb2\xdc\x0a\xb8\xc3\x30\xcc\x71\xb5\x4d\x60\xd8\xbe\x6e\x42\x93\x00\xa4\xbb\xba\x01\x2d\x57\x77\x75\x37\xcb\x4f\x80\xfa\x03\xf2\x02\xc8\x8b\xfc\x44\xb6\xc9\xa4\x9e\xc9\x30\xad\xfb\x79\xfb\x29\x46\x68\x38\x3d\x03\xea\xf0\xf6\xa7\x2d\x96\xe6\x3f\x07\x50\x96\xd6\x36\xda\x95\xe1\xf5\x2d\x85\xba\x23\xae\x07\x91\x09\x2c\x04\x2d\xe2\xeb\x04\x12\xdd\x90\x21\x85\x9e\xee\x42\xc7\x00\x04\x7a\xa6\x8e\x11\xf4\x6c\x60\xe4\xa1\x24\xc0\x85\x0e\xd1\xa1\x07\x64\xb3\xa5\x28\x80\x6c\x96\x7c\xd0\x93\xbd\x92\xcc\x33\x55\xbf\x2d\xc5\x49\x22\x22\xe5\xd9\xd0\x53\xc2\x1c\x45\xa0\x2d\x14\xee\xde\x30\xf1\xd5\x76\x7a\x85\xc9\xd2\x66\xb5\xc2\x64\x75\xef\xac\x8e\x08\x46\x44\xfa\xe1\x40\x4b\x01\xa2\x1c\xd3\x1d\x88\x81\x05\xb1\xa5\xec\x37\x73\x5c\x8c\x3c\xf9\x89\x6e\xc9\x2c\x75\x20\x26\xfa\x02\x5e\x25\x96\x40\x75\x48\xde\x1c\xb1\x1c\x1c\x23\x2f\x3e\x62\x48\xa9\xb6\xa2\x01\x73\xd4\x0e\x02\x8d\xda\x9b\x5e\xcc\xeb\xfa\xae\xf0\xda\x3c\xc7\x18\xa9\x44\x37\x8a\x44\xb7\x65\x9e\x43\x24\xf3\xde\x84\xa6\x74\xc5\x72\xf2\x86\xbc\x3d\x9b\xe7\x3d\x44\xc4\x97\x65\x27\xb1\xb2\x1c\x75\xad\xe7\xcd\x07\xf1\x50\xed\xeb\x2a\x0f\x6b\xbb\xa6\x0d\x63\x4f\x2c\x88\xe7\xa1\xaf\xd5\x82\xb1\xbf\x5a\x30\x8b\x5a\xb0\x0e\x57\x0b\xf9\xce\xe8\x1c\x8f\xa5\x1d\xc7\xc6\x03\x84\xe1\x4a\x8f\xe7\x03\x44\x55\x0f\x64\x5e\x10\x56\x55\x10\xa4\x2c\x08\x52\x15\x04\x69\x5a\x10\x46\x55\x10\xe6\x51\x0a\x22\xdf\x62\xd4\x8a\xa9\x74\xe9\x73\x31\xb1\x2e\xbe\xcb\xcd\xaa\x41\x7e\x59\xfb\x74\xd8\xd5\xd4\x3d\xd3\x52\xf3\x6d\xc2\xe3\xaa\x5d\x55\x8d\x21\xbf\x70\x88\x03\xad\xc8\x90\x83\x09\xf6\x74\x79\xd4\xb1\xb7\xf5\xdb\x47\xed\xac\x1d\xc2\x26\xcf\x06\xa6\x3d\x36\x5c\xdd\x70\xb7\x19\x91\xef\x20\x1d\xc6\x08\x68\x5a\xc0\x35\xa1\x15\xe9\x05\x32\xa0\x21\x32\xf9\xce\xc9\x41\xa2\x65\x4a\xa3\x30\x32\x4a\xab\xf4\xc2\x2a\xd0\x20\x5e\x6a\xcb\xe0\x10\x56\x19\x04\xb8\xe6\x57\x15\xb2\xad\xd0\xa8\xa5\xf1\x83\x18\xa1\xee\x9c\xe4\x30\x11\x15\xc0\xe8\x0d\x81\xc9\x57\x84\x35\x75\xcf\xfa\x47\xca\x69\xdc\x8b\x98\xfe\x5e\x4d\x60\xb7\x1a\xaa\x34\x23\xe0\x9a\x7d\x07\x6d\x32\xfb\x61\xed\x6a\x99\x73\x45\xf9\x15\x0b\xb7\x63\xa4\xf2\xc1\x02\xc4\xbe\x92\x06\x38\xbb\x69\xcf\x17\xef\x56\xd4\xff\x26\x27\x03\x8d\xf4\x7b\x2e\x70\x9d\x2b\xdb\x00\xc4\x6e\xa8\xbf\xd3\x2a\x66\x26\x9d\x56\x36\x2e\x4f\xe5\x3c\xb3\x30\x48\x4e\xb4\xb5\xf3\xab\x7c\xc2\x59\xf2\x64\x43\x1a\x57\xd1\x52\x13\x59\x6d\xed\xeb\x7a\x24\x5d\x29\x3d\xe0\x63\x35\x87\xcd\x4f\x16\x67\xb3\x69\x92\x88\x95\x17\xe0\x2c\xbc\x74\xe2\x96\x8e\x69\xde\x5a\x4c\xfd\x26\x3c\x0e\x92\x09\xa4\x41\x70\x31\x66\xb1\xb8\xe2\x99\x60\x31\x4b\x4f\xdf\xc8\x59\xf1\x9b\x33\x10\x8e\x62\xb5\x86\x02\x4e\x99\xec\x7f\x0b\xfe\x3a\xa9\x96\x06\xe2\x4c\x80\x62\xf2\xfc\xad\x58\x75\xeb\x82\x20\xf1\x47\x03\x16\x0b\xd8\x63\xe2\x22\x62\xf2\xf4\xfd\xec\x73\x90\x0b\x5c\x98\x66\xbf\xa9\x16\x0f\x96\x45\x40\x85\x84\xb4\x43\x1a\x75\xfa\xa6\x78\xc6\x5c\x92\x2f\x6b\x96\x8e\x3e\xa4\x4f\xf6\xcf\x95\xc8\xab\x55\xd1\x8b\xef\x3c\x51\xf2\x73\xd2\x02\xfb\x39\xf4\x90\xc7\x5c\x9c\x4a\x09\x67\x0b\x0f\x93\xb5\x5a\x60\x96\x8c\x80\x4f\x63\x40\x83\x00\x0c\x92\x94\x81\x64\x28\xb1\xca\x40\x9f\xa5\xac\x20\xfc\xfb\xed\x49\x75\x98\xbf\x35\xa8\xd3\xca\x5f\x16\xd4\x69\xa9\x37\x48\xfd\x2f\x00\x00\xff\xff\x5a\x59\xc2\xcb\x59\x4a\x00\x00")

func playgroundHtmlBytes() ([]byte, error) {
	return bindataRead(
		_playgroundHtml,
		"playground.html",
	)
}

func playgroundHtml() (*asset, error) {
	bytes, err := playgroundHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "playground.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"playground.html": playgroundHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"playground.html": &bintree{playgroundHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
